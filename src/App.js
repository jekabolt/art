import * as THREE from 'three'
import { memo } from 'react'
import { Canvas } from '@react-three/fiber'
import { Lightformer, Environment, OrbitControls, Center, Float, useGLTF, AccumulativeShadows, RandomizedLight } from '@react-three/drei'
import { EffectComposer, N8AO, ToneMapping, TiltShift2 } from '@react-three/postprocessing'
import { useControls } from 'leva'

export default function App() {
  const { intensity, blurriness, highlight } = useControls({
    intensity: { value: 1.5, min: 0, max: 4, step: 0.1 },
    blurriness: { value: 1, min: 0, max: 1, step: 0.01 },
    highlight: 'red'
  })
  return (
    <Canvas shadows camera={{ position: [0, -1, 4], fov: 65 }}>
      <group position={[0, -0.5, 0]}>
        <Float floatIntensity={2}>
          <Center scale={3} position={[0, 1, 0]} rotation={[0, -Math.PI / 3.5, -0.4]}>
            <Helmet />
          </Center>
        </Float>
        <Shadows />
      </group>
      <OrbitControls />
      <Environment resolution={1024} background backgroundBlurriness={blurriness} environmentIntensity={intensity}>
        <Room highlight={highlight} />
      </Environment>
      <Effects />
    </Canvas>
  )
}

const Shadows = memo(() => (
  <AccumulativeShadows frames={100} temporal alphaTest={0.8} opacity={1.25} scale={15} position={[0, -1.12, 0]}>
    <RandomizedLight amount={8} radius={4} position={[1, 5.5, 1]} />
  </AccumulativeShadows>
))

const Effects = memo(() => (
  <EffectComposer>
    <N8AO aoRadius={1} intensity={6} />
    <TiltShift2 samples={5} blur={0.5} />
    <ToneMapping />
  </EffectComposer>
))

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 jousting_helmet.glb --transform --resolution=4098 
Files: jousting_helmet.glb [45.8MB] > jousting_helmet-transformed.glb [3.99MB] (91%)
Author: The Royal Armoury (Livrustkammaren) (https://sketchfab.com/TheRoyalArmoury)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/jousting-helmet-a4eea31d9d9441af9434a7da5ae46b54
Title: Jousting Helmet
*/
function Helmet(props) {
  const { roughness } = useControls({ roughness: { value: 0.15, min: 0, max: 0.3, step: 0.01 } })
  const { nodes, materials } = useGLTF('/jousting_helmet-transformed.glb')
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        geometry={nodes.Object_2.geometry}
        material={materials.model_Material_u1_v1}
        material-roughness={roughness}
        position={[-2.016, -0.06, 1.381]}
        rotation={[-1.601, 0.068, 2.296]}
        scale={0.038}
      />
    </group>
  )
}

const box = new THREE.BoxGeometry()
const white = new THREE.MeshStandardMaterial({ color: new THREE.Color(1, 1, 1) })
function Room({ highlight }) {
  return (
    <group position={[0, -0.5, 0]}>
      {/** Lights, doesn't matter how expensive they are, they're only rendered once  */}
      <spotLight castShadow position={[-15, 20, 15]} angle={0.2} penumbra={1} intensity={2} decay={0} />
      <spotLight castShadow position={[15, 20, 15]} angle={0.2} penumbra={1} intensity={2} decay={0} />
      <spotLight castShadow position={[15, 20, -15]} angle={0.2} penumbra={1} intensity={2} decay={0} />
      <spotLight castShadow position={[-15, 20, -15]} angle={0.2} penumbra={1} intensity={2} decay={0} />
      <pointLight castShadow color="white" intensity={100} distance={28} decay={2} position={[0.5, 14.0, 0.5]} />
      {/** Room, just an inverted box */}
      <mesh geometry={box} castShadow receiveShadow position={[0.0, 13.2, 0.0]} scale={[31.5, 28.5, 31.5]}>
        <meshStandardMaterial color="gray" side={THREE.BackSide} />
      </mesh>
      {/** Some boxes */}
      <mesh geometry={box} material={white} castShadow receiveShadow position={[-10.906, -1.0, 1.846]} rotation={[0, -0.195, 0]} scale={[2.328, 7.905, 4.651]} />
      <mesh geometry={box} material={white} castShadow receiveShadow position={[-5.607, -0.754, -0.758]} rotation={[0, 0.994, 0]} scale={[1.97, 1.534, 3.955]} />
      <mesh geometry={box} material={white} castShadow receiveShadow position={[6.167, -0.16, 7.803]} rotation={[0, 0.561, 0]} scale={[3.927, 6.285, 3.687]} />
      <mesh geometry={box} material={white} castShadow receiveShadow position={[-2.017, 0.018, 6.124]} rotation={[0, 0.333, 0]} scale={[2.002, 4.566, 2.064]} />
      <mesh geometry={box} material={white} castShadow receiveShadow position={[2.291, -0.756, -2.621]} rotation={[0, -0.286, 0]} scale={[1.546, 1.552, 1.496]} />
      <mesh geometry={box} material={white} castShadow receiveShadow position={[-2.193, -0.369, -5.547]} rotation={[0, 0.516, 0]} scale={[3.875, 3.487, 2.986]} />
      {/** Softboxes & lightformers */}
      <Lightformer form="ring" position={[2, 3, -2]} scale={10} color={highlight} intensity={15} />
      <Lightformer form="box" intensity={80} position={[-14.0, 10.0, 8.0]} scale={[0.1, 2.5, 2.5]} target={false} />
      <Lightformer form="box" intensity={80} position={[-14.0, 14.0, -4.0]} scale={[0.1, 2.5, 2.5]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={23} position={[14.0, 12.0, 0.0]} scale={[0.1, 5.0, 5.0]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={16} position={[0.0, 9.0, 14.0]} scale={[5.0, 5.0, 0.1]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={80} position={[7.0, 8.0, -14.0]} scale={[2.5, 2.5, 0.1]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={80} position={[-7.0, 16.0, -14.0]} scale={[2.5, 2.5, 0.1]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={1} position={[0.0, 20.0, 0.0]} scale={[0.1, 0.1, 0.1]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
      <Lightformer form="box" intensity={20} position={[0.0, 15, 0.0]} scale={[10, 1, 10]} target={false} light={{ intensity: 100, distance: 28, decay: 2 }} />
    </group>
  )
}
